{"version":3,"sources":["components/CatImage.jsx","App.js","serviceWorker.js","index.js"],"names":["unsplash","Unsplash","applicationId","process","secret","CatImage","classifier","useState","imgSrc","setImgSrc","imgDesc","setImgDesc","imgWidth","setImgWidth","imgHeight","setImgHeight","predictions","setPredictions","imgRef","useRef","onLoaded","options","model","console","log","predict","current","err","results","modelPredict","classifierPredict","newImg","Image","src","newImgModelPredict","newImgClassifierPredict","yolo","ml5","YOLO","detect","res","useEffect","photos","getRandomPhoto","query","count","then","ok","statusText","Error","json","alt","alt_description","width","height","url","urls","regular","user","first_name","last_name","imageClassifier","catch","error","ref","map","label","confidence","key","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qSAIMA,EAAW,IAAIC,IAAS,CAC5BC,cAAeC,mEACfC,OAAeD,qEAGJE,EAAW,WAAO,IAQzBC,EARwB,EACEC,mBAAS,IADX,mBACrBC,EADqB,KACZC,EADY,OAEEF,mBAAS,IAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAGIJ,mBAAS,GAHb,mBAGrBK,EAHqB,KAGXC,EAHW,OAIMN,mBAAS,GAJf,mBAIrBO,EAJqB,KAIVC,EAJU,OAKUR,mBAAS,IALnB,mBAKrBS,EALqB,KAKRC,EALQ,KAMtBC,EAASC,iBAAO,MAItB,SAASC,EAAUC,EAASC,GAC1BC,QAAQC,IAAI,gBAAiB,CAACH,UAASC,UACvCA,GAASA,EAAMG,QAAQP,EAAOQ,QAAS,IAAI,SAASC,EAAKC,GACvDL,QAAQC,IAAI,CAAEK,aAAcD,EAASD,QACjCC,GAASX,EAAeW,MAG9BtB,EAAWmB,QAAQP,EAAOQ,QAAS,IAAI,SAASC,EAAKC,GACnDL,QAAQC,IAAI,CAAEM,kBAAmBF,EAASD,QACtCC,GAASX,EAAeW,MAG9B,IAAMG,EAAS,IAAIC,MAAM,IAAK,KAC9BD,EAAOE,IAAI,aAEXX,GAASA,EAAMG,QAAQM,EAAQ,IAAI,SAASJ,EAAKC,GAC/CL,QAAQC,IAAI,CAAEU,mBAAoBN,EAASD,MAAKI,WAC5CH,GAASX,EAAeW,MAE9BtB,EAAWmB,QAAQM,EAAQ,IAAI,SAASJ,EAAKC,GAC3CL,QAAQC,IAAI,CAAEW,wBAAyBP,EAASD,QAC5CC,GAASX,EAAeW,MAG9B,IAAMQ,EAAOC,IAAIC,OACjBF,EAAKG,OAAOR,GAAQ,SAACJ,EAAKa,GACxBjB,QAAQC,IAAI,CAACY,OAAMT,MAAKI,OAAQS,OAElCJ,EAAKG,OAAOrB,EAAOQ,SAAS,SAACC,EAAKa,GAChCjB,QAAQC,IAAI,CAACY,OAAMT,MAAKI,OAAQS,OA2BpC,OAtBAC,qBAAU,WACRzC,EACG0C,OACAC,eAAe,CAACC,MAAO,OAAQC,MAAO,IACtCC,MAAK,SAAAN,GAAQ,IACLO,EAAkBP,EAAlBO,GAAIC,EAAcR,EAAdQ,WACX,IAAKD,EACH,MAAM,IAAIE,MAAMD,GAElB,OAAOR,KAERM,MAAK,SAAAN,GAAG,OAAIA,EAAIU,UAChBJ,MAAK,YAAmG,IAAD,sBAA9EK,EAA8E,EAA/FC,gBAAsBC,EAAyE,EAAzEA,MAAOC,EAAkE,EAAlEA,OAAwBC,EAA0C,EAA1DC,KAAOC,QAAmD,IAApCC,KAAOC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,UACrFjD,EAAW,YAAD,OAAagD,EAAb,YAA2BC,EAA3B,yBAAqDT,IAC/D1C,EAAU8C,GACV1C,EAAYwC,GACZtC,EAAauC,MAEdR,MAAK,WAAQxC,EAAa+B,IAAIwB,gBAAgB,YAAazC,MAC3D0C,OAAM,SAAAnC,GAAG,OAAIJ,QAAQwC,MAAMpC,QAC7B,IAGD,oCACE,gCACE,yBAAKM,IAAKzB,EAAQ2C,IAAKzC,EAASsD,IAAK9C,EAAQmC,MAAOzC,EAAU0C,OAAQxC,IACtE,oCAAaJ,IAEf,iCACE,4BACGM,EAAYiD,KAAI,gBAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,WAAT,OACf,wBAAIC,IAAKD,GAAaD,EAAtB,gBAA0CC,UCtEvCE,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,0BAAMA,UAAU,cACd,kBAAC,EAAD,SCIFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThC,MAAK,SAAAqC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BlE,QAAQC,IACN,iHAKEuD,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB5D,QAAQC,IAAI,sCAGRuD,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BrB,OAAM,SAAAC,GACLxC,QAAQwC,MAAM,4CAA6CA,MC1FjE6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBhB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAI7F,aAAwBsE,OAAOC,SAASuB,MACpDC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAM3E,aAAN,sBAEPoE,IAgEV,SAAiCO,EAAOC,GAEtCqB,MAAMtB,GACHhC,MAAK,SAAAuD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAM7D,MAAK,SAAAqC,GACjCA,EAAayB,aAAa9D,MAAK,WAC7B2B,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1BjB,OAAM,WACLvC,QAAQC,IACN,oEArFAsF,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAM7D,MAAK,WACjCvB,QAAQC,IACN,iHAMJqD,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.99455975.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport Unsplash from 'unsplash-js'\r\nimport ml5 from 'ml5'\r\n\r\nconst unsplash = new Unsplash({\r\n  applicationId: process.env.REACT_APP_ACCESS,\r\n  secret:        process.env.REACT_APP_SECRET\r\n})\r\n\r\nexport const CatImage = () => {\r\n  const [imgSrc,  setImgSrc]  = useState('')\r\n  const [imgDesc, setImgDesc] = useState('')\r\n  const [imgWidth, setImgWidth] = useState(0)\r\n  const [imgHeight, setImgHeight] = useState(0)\r\n  const [predictions, setPredictions] = useState([])\r\n  const imgRef = useRef(null)\r\n  \r\n  let classifier\r\n\r\n  function onLoaded (options, model) {\r\n    console.log('Model Loaded!', {options, model})\r\n    model && model.predict(imgRef.current, 10, function(err, results) {\r\n      console.log({ modelPredict: results, err })\r\n      if (results) setPredictions(results)\r\n    })\r\n\r\n    classifier.predict(imgRef.current, 10, function(err, results) {\r\n      console.log({ classifierPredict: results, err })\r\n      if (results) setPredictions(results)\r\n    })\r\n    \r\n    const newImg = new Image(400, 400)\r\n    newImg.src=\"/index.png\"\r\n    \r\n    model && model.predict(newImg, 10, function(err, results) {\r\n      console.log({ newImgModelPredict: results, err, newImg })\r\n      if (results) setPredictions(results)\r\n    })\r\n    classifier.predict(newImg, 10, function(err, results) {\r\n      console.log({ newImgClassifierPredict: results, err })\r\n      if (results) setPredictions(results)\r\n    })\r\n\r\n    const yolo = ml5.YOLO()\r\n    yolo.detect(newImg, (err, res) => {\r\n      console.log({yolo, err, newImg: res})\r\n    })\r\n    yolo.detect(imgRef.current, (err, res) => {\r\n      console.log({yolo, err, newImg: res})\r\n    })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    unsplash\r\n      .photos\r\n      .getRandomPhoto({query: 'boat', count: 1})\r\n      .then(res => {\r\n        const {ok, statusText} = res\r\n        if (!ok) {\r\n          throw new Error(statusText)\r\n        }\r\n        return res\r\n      })\r\n      .then(res => res.json())\r\n      .then(([{alt_description: alt, width, height, urls: {regular: url}, user: {first_name, last_name}}]) => {\r\n        setImgDesc(`Photo by ${first_name} ${last_name} on Unsplash, ${alt}`)\r\n        setImgSrc(url)\r\n        setImgWidth(width)\r\n        setImgHeight(height)\r\n      })\r\n      .then(() => { classifier = ml5.imageClassifier('MobileNet', onLoaded) })\r\n      .catch(err => console.error(err))\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <figure>\r\n        <img src={imgSrc} alt={imgDesc} ref={imgRef} width={imgWidth} height={imgHeight} />\r\n        <figcaption>{imgDesc}</figcaption>\r\n      </figure>\r\n      <section>\r\n        <ul>\r\n          {predictions.map(({label, confidence}) => (\r\n            <li key={confidence}>{label}: confidence {confidence}</li>            \r\n          ))}\r\n        </ul>\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport { CatImage } from './components/CatImage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className=\"App-header\">\n        <CatImage />\n      </main>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}